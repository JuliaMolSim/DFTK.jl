# # DFTK - Wannier90 interface
#
# DFTK features an interface with the program
# [Wannier90](http://www.wannier.org/),
# in order to compute maximally-localized Wannier functions (MLWFs)
# from an initial scf calculation. Several steps alternating
# calls to DFTK functions and Wannier90 procedures are needed.
#  Indeed, Wannier90 needs one input file
# `.win` that contains the parameters of the calculations and the
# description of the system, as well as three data files `.mmn`,
# `.amn` and `.eig`.
#
# The whole procedure takes four steps :
#
# - production of `win` file -> call to `dftk2wan_win_file`
# - Wannier90's preprocessing step
# - production of `.amn`, `.mmn`and `eig` -> call to `dftk2wan_wannierization_files`
# - Wannier90's computation of MLWFs
#
# One can either run the calculations step by step by using the fonctions
# `dftk2wan_win_file`, `dftk2wan_wannierization_files` or call the function
# `run_wannier90`, which handles all the steps.
#
# This example shows how to obtain the MLWFs corresponding
# to the first eight bands of silicon. Since the bands 5 to 8 are entangled,
# 12 bands are first computed to obtain 8 MLWFs by a disantanglement procedure.
# We first perfom a SCF calculation, which is for the most part identical to the
# regular case.
#
# !!! warning "Compatibility asks for a specific setup"
#     The `.win` file will correspond to the studied system only if
#     the number of ``k`` points in input is the same as in output.
#     Since DFTK reduces by default the number of ``k`` points by
#     symmetry one must specify `use_symmetry = false`
#     in the creation of the plane wave basis.

using DFTK

a = 10.26
lattice = a / 2*[[-1.  0. -1.];
                 [ 0   1.  1.];
                 [ 1   1.  0.]]

Si = ElementPsp(:Si, psp=load_psp("hgh/pbe/Si-q4"))
atoms = [ Si => [zeros(3), 0.25*[-1,3,-1]] ]

model = model_PBE(lattice,atoms)

kgrid = [4,4,4]
Ecut = 20
basis = PlaneWaveBasis(model, Ecut; kgrid=kgrid, use_symmetry=false)

scfres = self_consistent_field(basis, tol=1e-12, n_bands = 12);

# !!! note "Extra bands."
#     DFTK automatically adds 3 extra non converged bands for the scf calculation.
#     The number of bands appearing in the win file will then be `n_bands+3`.
#     You can disable it at your own risk with `n_ep_extra = 0` in the
#     call to `self_consistent_field`.
#
# Let us first begin with the step by step procedures.
# We may now create the `.win` file. In addition of information on the system
# (via `scfres`) the function `dftk2wan_win_file` asks for the number of wanted MLWFs ;
#  8 in our case. In Wannier90's convention, all files are named with the same
# prefix and only differ by their types. Such prefix also has to be specified to
# `dftk2wan_win_file`. In this example, the choice "Si" will produce the file `Si.win`.
# The keyword `bands_plot = true`
# adds the ``k`` point path to the `.win` file, needed to plot the bands structure.
# We also add as keyword arguments the parameters of the disentanglement
# procedure. Any other argument of the form key = value can be added as such.

prefix = "Si"
dftk2wan_win_file(prefix, scfres, 8;
                  bands_plot=true,
                  num_print_cycles=50, num_iter=500,
                  dis_win_max       = 17.185257,
                  dis_froz_max      = 6.8318033,
                  dis_num_iter      = 120,
                  dis_mix_ratio     = 1.0)

# We then perform a preprocessing task via Wannier90 to generate
# the `Si.nnkp` file. This is simply done by :

#md #```@raw bash
#md #$ PathToWannier90/wannier90.x -pp Si

# Wannier90's preprocessing routine has produced one `.nnkp` file.
# This file is read by `dftk2wan_wannierization_files` in order to
# generate the `.mmn`, `.amn` and `.eig` files. This function ask once again
# for informations on the system via the prefix "Si",
#  scfres and the number of wanted MLWFs.
# The other main argument concerns the guess MLWFs used to compute `.amn`.
#
# - The default guess is `guess = "gaussian"`, which asks for gaussian guesses
#   whose centers are specified by
#  `centers = [ [center 1] .... [center N_{MLWFs}] ]`. These centers are expected
#   in reduced coordinates.
#   If none are given, DFTK uses a random set of centers.
#
# - If one manually adds a `projections` bloc in the `win` file, e.g.

#md #```@raw bash
#md #begin projections
#md #Si:sp3
#md #end projections

# one may ask for `guess = "win"` to use the guess generated by Wannier90
# preprocessing. The supported orbitals are : s, p, d, f and sp3.
#
# We choose in this case a random set of gaussians as initial guesses.

dftk2wan_wannierization_files(prefix, scfres, 8, guess = "gaussian",
                              write_amn = true,
                              write_mmn = true,
                              write_eig = true)

# Note that DFTK compute all files by default.
# Once the files are generated, the user can simply call the wannierization
# procedure with :

#md #```@raw bash
#md #$ PathToWannier90/wannier90.x Si

# For this example, the user could also simply have called

run_wannier90(prefix, scfres, 8, num_print_cycles=50, num_iter=500,
                         dis_win_max       = 17.185257,
                         dis_froz_max      = 6.8318033,
                         dis_num_iter      = 120,
                         dis_mix_ratio     = 1.0)

# to run all the calculations.
